- name: Create CoreDNS group
  ansible.builtin.group:
    name: "{{ coredns_group }}"
    system: true
    state: present

- name: Create CoreDNS user
  ansible.builtin.user:
    name: "{{ coredns_user }}"
    group: "{{ coredns_group }}"
    system: true
    create_home: false
    shell: /usr/sbin/nologin

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ coredns_user }}"
    group: "{{ coredns_group }}"
    mode: "0755"
  loop:
    - /etc/coredns
    - /var/log/coredns

- name: Check if CoreDNS is installed
  ansible.builtin.stat:
    path: /usr/local/bin/coredns
  register: coredns_binary

- name: Get installed CoreDNS version
  ansible.builtin.command: /usr/local/bin/coredns -version
  register: coredns_installed_version_output
  changed_when: false
  failed_when: false
  when: coredns_binary.stat.exists

- name: Extract CoreDNS version number
  ansible.builtin.set_fact:
    coredns_installed_version: "{{ coredns_installed_version_output.stdout | regex_search('CoreDNS[-]?([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first }}"
  when: coredns_installed_version_output.stdout is defined

- name: Get latest CoreDNS release info
  ansible.builtin.uri:
    url: https://api.github.com/repos/coredns/coredns/releases/latest
    method: GET
    return_content: true
    headers:
      User-Agent: "Ansible"
  register: coredns_latest
  failed_when: coredns_latest.status != 200
  when: not coredns_version # only fetch the releases if not installing a specific version

- name: Set version check facts
  ansible.builtin.set_fact:
    has_version: "{{ coredns_installed_version is defined }}"
    use_latest_version: "{{ not coredns_version }}"
    auto_update_enabled: "{{ coredns_auto_update | bool }}"
    coredns_latest_version: "{{
      coredns_latest.json.tag_name | regex_replace('^v', '') if
      (coredns_latest is defined and
      'json' in coredns_latest and coredns_latest.json.tag_name is defined)
      else None
      }}"

- name: Check whether CoreDNS needs to be updated or installed
  ansible.builtin.set_fact:
    coredns_needs_update: "{{
      coredns_binary.stat.exists and
      has_version and
      use_latest_version and
      auto_update_enabled and
      coredns_latest_version != coredns_installed_version
      }}"
    coredns_needs_install: "{{
      not coredns_binary.stat.exists or
      (not use_latest_version and has_version and coredns_version != coredns_installed_version)
      }}"

- name: Debug installation status
  ansible.builtin.debug:
    msg:
      - "Has binary: {{ coredns_binary.stat.exists }}"
      - "Has version: {{ has_version }}"
      - "Using latest version: {{ use_latest_version }}"
      - "Auto update enabled: {{ auto_update_enabled }}"
      - "Latest version: {{ coredns_latest_version }}"
      - "Installed version: {{ coredns_installed_version | default('not installed') }}"
      - "Target version: {{ coredns_version | default('using latest') }}"
      - "Needs update: {{ coredns_needs_update }}"
      - "Needs install: {{ coredns_needs_install }}"
  when: ansible_verbosity > 1

- name: Install/Update CoreDNS
  when: coredns_needs_install or coredns_needs_update
  block:
    - name: Set target CoreDNS version
      ansible.builtin.set_fact:
        target_version: "{{
          (coredns_version if coredns_version is not none else
          (coredns_latest.json.tag_name[1:] if (coredns_latest is defined and 'json' in coredns_latest and coredns_latest.json.tag_name is defined) else None))
          }}"

    - name: Set architecture variables
      ansible.builtin.set_fact:
        architecture: "{{ 'amd64' if ansible_architecture == 'x86_64' else ('arm64' if ansible_architecture == 'aarch64' else ansible_architecture) }}"

    - name: Download CoreDNS checksum file
      ansible.builtin.get_url:
        url: "https://github.com/coredns/coredns/releases/download/v{{ target_version }}/coredns_{{ target_version }}_linux_{{ architecture }}.tgz.sha256"
        dest: "/tmp/coredns.sha256"
        mode: "0755"
        headers:
          User-Agent: "Ansible"
        timeout: 60
      retries: 3

    - name: Read checksum
      ansible.builtin.slurp:
        src: "/tmp/coredns.sha256"
      register: checksum_content

    - name: Set checksum fact
      ansible.builtin.set_fact:
        coredns_checksum: "sha256:{{ (checksum_content.content | b64decode).split(' ')[0] }}"

    - name: Download CoreDNS
      ansible.builtin.get_url:
        url: "https://github.com/coredns/coredns/releases/download/v{{ target_version }}/coredns_{{ target_version }}_linux_{{ architecture }}.tgz"
        # dest: /usr/local/bin
        dest: "/tmp/coredns.tgz"
        owner: "{{ coredns_user }}"
        group: "{{ coredns_group }}"
        mode: "0644"
        checksum: "{{ coredns_checksum }}"
        headers:
          User-Agent: "Ansible"
        timeout: 60
      retries: 3

    - name: Extract CoreDNS
      ansible.builtin.unarchive:
        src: "/tmp/coredns.tgz"
        dest: "/usr/local/bin/"
        remote_src: true

    - name: Create basic Corefile
      ansible.builtin.template:
        src: Corefile.j2
        dest: /etc/coredns/Corefile
        owner: "{{ coredns_user }}"
        group: "{{ coredns_group }}"
        mode: "0644"
        backup: true
        # force: false # don't overwrite an existing config
  always:
    - name: Clean up files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/coredns.sha256
        - /tmp/coredns.tgz
