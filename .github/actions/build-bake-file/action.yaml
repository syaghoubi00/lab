name: "Build a Bake file from Containerfiles"
description: "Finds all Containerfiles and generates Docker Bake file"

outputs:
  files:
    description: "Found Containerfile paths"
    value: ${{ steps.find-containers.outputs.files }}
  images:
    description: "Container image names"
    value: ${{ steps.find-containers.outputs.images }}
  bake-file:
    description: "Generated Docker Bake file"
    value: ${{ steps.find-containers.outputs.bake-file }}

runs:
  using: "composite"
  steps:
    - id: find-containers
      shell: bash
      run: |
        bake_file="${GITHUB_WORKSPACE}/docker-bake.json"

        # Initialize arrays
        declare -a files
        declare -a images

        # Initialize the basic structure
        cat >"$bake_file" <<EOF
        {
          "group": {
            "default": {
              "targets": []
            }
          },
          "target": {}
        }
        EOF

        while IFS= read -r dockerfile; do
          rel_path=${dockerfile#containers/}
          dir_path=$(dirname "$rel_path")
          context_dir=$(dirname "$dockerfile")

          # Determine the dockerfile name (Containerfile or Dockerfile)
          # since buildkit doesn't detect Containerfile
          # as of github.com/docker/buildx v0.20.0 8e30c46
          if [ -f "${context_dir}/Containerfile" ]; then
            dockerfile_name="Containerfile"
          else
            dockerfile_name="Dockerfile"
          fi

          # Count path segments in dir_path (without containers/ prefix)
          segment_count=$(echo "$dir_path" | tr -cd '/' | wc -c)
          segment_count=$((segment_count + 1))

          case $segment_count in
            1) # Single level: ansible-dev-tools
              target_name="$dir_path"
              image_name="$dir_path"
              tag_name="latest"
              ;;
            2) # Two levels: fedora/41
              parent_dir=$(echo "$dir_path" | cut -d'/' -f1)
              tag_name=$(echo "$dir_path" | cut -d'/' -f2)
              target_name="${parent_dir}-${tag_name}"
              image_name="${parent_dir}"
              ;;
            3) # Three levels: boxes/fedora/latest
              parent_dir=$(echo "$dir_path" | cut -d'/' -f1)
              app_name=$(echo "$dir_path" | cut -d'/' -f2)
              tag_name=$(echo "$dir_path" | cut -d'/' -f3)
              target_name="${parent_dir}-${app_name}-${tag_name}"
              image_name="${parent_dir}-${app_name}"
              ;;
            *)
              echo "Warning: Unexpected directory depth for $dockerfile"
              continue
              ;;
          esac

          # Add to arrays
          files+=("$containerfile")
          images+=("ghcr.io/${{ github.repository_owner }}/${image_name}:${tag_name}")

          # Add target configuration
          jq --arg tn "$target_name" \
            --arg ctx "$context_dir" \
            --arg df "$dockerfile_name" \
            --arg tag "ghcr.io/${{ github.repository_owner }}/${image_name}:${tag_name}" \
            '.target[$tn] = {
                  "context": $ctx,
                  "dockerfile": $df,
                  "tags": [$tag]
                }' "$bake_file" >"${bake_file}.tmp" && mv "${bake_file}.tmp" "$bake_file"

          # Add target to default group
          jq --arg tn "$target_name" \
            '.group.default.targets += [$tn]' "$bake_file" >"${bake_file}.tmp" && mv "${bake_file}.tmp" "$bake_file"
        done < <(find containers -type f \( -name "Containerfile" -o -name "Dockerfile" \))

        # Set outputs
        echo "files=${files[*]}" >> $GITHUB_OUTPUT
        echo "images=${images[*]}" >> $GITHUB_OUTPUT
        echo "bake-file=${bake_file}" >> $GITHUB_OUTPUT

    - id: validate-bake-file
      shell: bash
      run: |
        BAKE_FILE="${{ steps.find-containers.outputs.bake-file }}"

        # Validate the file exists
        if [ ! -f "$BAKE_FILE" ]; then
          echo "Error: Bake file not found at $BAKE_FILE"
          exit 1
        fi

        # Validate syntax and check contexts
        if ! docker buildx bake --file "$BAKE_FILE" --check; then
          echo "Error: Bake file validation failed"
          exit 1
        fi

        echo "Bake file validation successful!"
