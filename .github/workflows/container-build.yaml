name: Container Build

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
      registry:
        required: false
        type: string
        default: "ghcr.io"
    outputs:
      build-status:
        description: "Status of container builds"
        value: ${{ jobs.build.outputs.build-status }}
      sbom-status:
        description: "Status of SBOM generation"
        value: ${{ jobs.build.outputs.sbom-status }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(inputs.platforms) }}
      fail-fast: false

    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      build-status: ${{ steps.build-containers.outputs.status }}
      provenance-status: ${{ steps.provenance.outputs.status }}
      sbom-status: ${{ steps.generate-sbom.outputs.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.2.0

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.15.1

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Find Containerfiles
        id: containerfiles
        uses: ./.github/actions/find-containerfiles

      - name: Build and Push Containers
        id: build-containers
        uses: docker/bake-action@v5
        with:
          files: ${{ steps.containerfiles.outputs.bake-file }}
          push: true
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=local,src=/tmp/.buildx-cache
            *.cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.containerfiles.outputs.images }}
          format: spdx-json
          artifact-name: sbom.spdx.json

      - name: Sign Images and Attestations
        if: success()
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          for image in ${{ steps.containerfiles.outputs.images }}; do
            # Sign the container image
            cosign sign --yes "${image}@${{ steps.build-containers.outputs.digest }}"
            
            # Sign both SLSA provenance and SBOM in parallel
            if [ -f "sbom.spdx.json" ]; then
              {
                cosign attest --yes --type spdxjson --predicate sbom.spdx.json "${image}@${{ steps.build-containers.outputs.digest }}"
              } &
              wait
            fi
          done

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform }}
          path: |
            sbom.spdx.json
          retention-days: 90

      - name: Cleanup Cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d "/tmp/.buildx-cache-new" ]; then
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi
